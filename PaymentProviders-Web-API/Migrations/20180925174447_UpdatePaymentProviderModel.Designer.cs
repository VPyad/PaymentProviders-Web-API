// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentProviders_Web_API.DbContexts;

namespace PaymentProvidersWebAPI.Migrations
{
    [DbContext(typeof(PaymentProvidersContext))]
    [Migration("20180925174447_UpdatePaymentProviderModel")]
    partial class UpdatePaymentProviderModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.Commission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CommissionValue");

                    b.Property<bool>("IsAbsolute");

                    b.Property<double>("MaxSum");

                    b.Property<double>("MinSum");

                    b.Property<long>("ProductPaymentInfoRef");

                    b.HasKey("Id");

                    b.HasIndex("ProductPaymentInfoRef")
                        .IsUnique();

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryCode");

                    b.Property<string>("NameRu");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PaymentProviderRef");

                    b.HasKey("Id");

                    b.HasIndex("PaymentProviderRef")
                        .IsUnique();

                    b.ToTable("PaymentInfo");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogCode");

                    b.Property<long?>("CategoryId");

                    b.Property<bool>("Check");

                    b.Property<string>("ChequeName");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("IsSupportRequestRSTEP");

                    b.Property<bool>("Mrlist");

                    b.Property<bool>("MultiCheck");

                    b.Property<string>("NameRu");

                    b.Property<bool>("NoSavePt");

                    b.Property<long>("Order");

                    b.Property<long?>("PaymentInfoId");

                    b.Property<string>("ProviderCode");

                    b.Property<string>("RegionString");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PaymentProvider");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentProviderRegion", b =>
                {
                    b.Property<long>("PaymentProviderId");

                    b.Property<long>("PaymentRegionId");

                    b.HasKey("PaymentProviderId", "PaymentRegionId");

                    b.HasIndex("PaymentRegionId");

                    b.ToTable("PaymentProviderRegion");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentRegion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentRegions");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.ProductPaymentInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("MaxSum");

                    b.Property<double>("MinSum");

                    b.Property<long?>("PaymentInfoId");

                    b.Property<string>("ProductType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PaymentInfoId");

                    b.ToTable("ProductPaymentInfo");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.ProviderField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("Direction");

                    b.Property<bool>("DontShow");

                    b.Property<bool>("DontTicket");

                    b.Property<string>("InterfaceType")
                        .IsRequired();

                    b.Property<string>("Mask");

                    b.Property<int?>("MaxLength");

                    b.Property<int?>("MinLength");

                    b.Property<string>("Name");

                    b.Property<long?>("PaymentProviderId");

                    b.Property<string>("RegExp");

                    b.Property<bool>("Required");

                    b.Property<string>("Title");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PaymentProviderId");

                    b.ToTable("ProviderField");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.ProviderMaskListItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc");

                    b.Property<string>("Key");

                    b.Property<long>("ProviderFieldId");

                    b.HasKey("Id");

                    b.HasIndex("ProviderFieldId");

                    b.ToTable("ProviderMaskListItems");
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.Commission", b =>
                {
                    b.HasOne("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.ProductPaymentInfo", "ProductPaymentInfo")
                        .WithOne("Commission")
                        .HasForeignKey("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.Commission", "ProductPaymentInfoRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentInfo", b =>
                {
                    b.HasOne("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentProvider", "PaymentProvider")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentInfo", "PaymentProviderRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentProvider", b =>
                {
                    b.HasOne("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentCategory", "Category")
                        .WithMany("Providers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentProviderRegion", b =>
                {
                    b.HasOne("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentProvider", "PaymentProvider")
                        .WithMany("Regions")
                        .HasForeignKey("PaymentProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentRegion", "PaymentRegion")
                        .WithMany("Providers")
                        .HasForeignKey("PaymentRegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.ProductPaymentInfo", b =>
                {
                    b.HasOne("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentInfo", "PaymentInfo")
                        .WithMany("ProductsPaymentInfo")
                        .HasForeignKey("PaymentInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.ProviderField", b =>
                {
                    b.HasOne("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.PaymentProvider", "PaymentProvider")
                        .WithMany("Fields")
                        .HasForeignKey("PaymentProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.ProviderMaskListItem", b =>
                {
                    b.HasOne("PaymentProviders_Web_API.Models.WebApi.PaymentsProviders.ProviderField", "ProviderField")
                        .WithMany("MaskListItem")
                        .HasForeignKey("ProviderFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
